class Solution {
public:
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
          
        vector<int> colors(graph.size(),-1);
        int color =0;
        
        // finding connected component and assign them one color
        for(int vertex=0;vertex<graph.size();vertex++){
            if(colors[vertex]==-1){
                DFS(graph, vertex, colors, color);
                color++;
            }
        }
        // size of each component
        vector<int> componentSize(color,0);
        for(auto color: colors){
            componentSize[color]++;
        }
        
        // find unique colors in initial array, might be they are connected each other
        vector<int> uniqueColor(color,0);
        for(auto node : initial){
            uniqueColor[colors[node]]++;
        }
        
        // calculatinng node have to removed minimized initial value array
        int ans = INT_MAX;
        for(auto node: initial){
            int colorValue = colors[node];
            if(uniqueColor[colorValue]==1){
                if(ans == INT_MAX){
                    ans = node;
                }else if(componentSize[colorValue] > componentSize[colors[ans]]){
                    ans = node;
                }else if(componentSize[colorValue]==componentSize[colors[ans]] && node<ans){
                    ans  = node;
                }
            }
